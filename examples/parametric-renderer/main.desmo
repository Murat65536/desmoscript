lowerBoundU = -3.141592;
upperBoundU = 3.141592;
lowerBoundV = -3.141592;
upperBoundV = 3.141592;

bigRadius = 5;
smallRadius = 2.5;

resolutionU = 20;
resolutionV = 20;

ns view {
    rotationControl = (0, 0);
    rotation = rotationControl * 10;

    xpos = -10;
    ypos = 0;
    zpos = -10;
}

fn parametricX(p) {
    smallRadius * sin(p\x)
}

fn parametricY(p) {
    (bigRadius + smallRadius * cos(p\x)) * sin(p\y)
}

fn parametricZ(p) {
    (bigRadius + smallRadius * cos(p\x)) * cos(p\y)
}

pairs = [(a, b) for 
    a=((1 .. (resolutionU + 1)) / resolutionU) * (upperBoundU - lowerBoundU) - lowerBoundU;
    b=((1 .. (resolutionV + 1)) / resolutionV) * (upperBoundV - lowerBoundV) - lowerBoundV
];

centerer = (
    (upperBoundU - lowerBoundU) / resolutionU / 2,
    (upperBoundV - lowerBoundV) / resolutionV / 2
);

xValues = parametricX(pairs) - view.xpos;

yValues = parametricY(pairs) - view.ypos;

zValues = parametricZ(pairs) - view.zpos;

xValuesR1 = xValues * cos(view.rotation\x) - zValues * sin(view.rotation\x);
yValuesR1 = yValues;
zValuesR1 = xValues * sin(view.rotation\x) + zValues * cos(view.rotation\x);

xValuesR2 = xValuesR1;
yValuesR2 = yValuesR1 * cos(view.rotation\y) - zValuesR1 * sin(view.rotation\y);
zValuesR2 = yValuesR1 * sin(view.rotation\y) + zValuesR1 * cos(view.rotation\y);

proj = (xValuesR2 / zValuesR2, yValuesR2 / zValuesR2);

baseVertexList = 1 .. ((resolutionU - 0) * (resolutionV - 0));

edgeVertexList = (1 .. (resolutionV)) * (resolutionU + 1);



polyVertex1 = join(
    baseVertexList + floor(baseVertexList / (resolutionU - 0)),
    edgeVertexList - resolutionU
);
polyVertex2 = join(
    baseVertexList + floor(baseVertexList / (resolutionU - 0)) + 1,
    edgeVertexList + 1
);
polyVertex3 = join(
    baseVertexList + floor(baseVertexList / (resolutionU - 0)) + resolutionU + 2,
    edgeVertexList + resolutionU + 0
);
polyVertex4 = join(
    baseVertexList + floor(baseVertexList / (resolutionU - 0)) + resolutionU + 1,
    edgeVertexList - 1
);



ns light {
    xpos = [0, 7, 9];
    ypos = [15, 7, -9];
    zpos = [0, -3, 12];

    rvalue = [1, 0, 0] * 100.0;
    gvalue = [0, 1, 0] * 100.0;
    bvalue = [0, 0, 1] * 100.0;
}


fn crossX(ax, ay, az, bx, by, bz) { ay * bz - az * by }
fn crossY(ax, ay, az, bx, by, bz) { az * bx - ax * bz }
fn crossZ(ax, ay, az, bx, by, bz) { ax * by - ay * bx }

ns normal {
    xDelta1 = xValues[polyVertex4] - xValues[polyVertex1];
    yDelta1 = yValues[polyVertex4] - yValues[polyVertex1];
    zDelta1 = zValues[polyVertex4] - zValues[polyVertex1];
    xDelta2 = xValues[polyVertex2] - xValues[polyVertex1];
    yDelta2 = yValues[polyVertex2] - yValues[polyVertex1];
    zDelta2 = zValues[polyVertex2] - zValues[polyVertex1];
    xnn = crossX(xDelta1, yDelta1, zDelta1, xDelta2, yDelta2, zDelta2);
    ynn = crossY(xDelta1, yDelta1, zDelta1, xDelta2, yDelta2, zDelta2);
    znn = crossZ(xDelta1, yDelta1, zDelta1, xDelta2, yDelta2, zDelta2);
    mag = (xnn ^ 2 + ynn ^ 2 + znn ^ 2) ^ 0.5;
    x = xnn / mag;
    y = ynn / mag;
    z = znn / mag;
}



ns depthSorting {
    xAverages = (xValuesR2[polyVertex1] + xValuesR2[polyVertex2] + xValuesR2[polyVertex3] + xValuesR2[polyVertex4]) / 4;
    yAverages = (yValuesR2[polyVertex1] + yValuesR2[polyVertex2] + yValuesR2[polyVertex3] + yValuesR2[polyVertex4]) / 4;
    zAverages = (zValuesR2[polyVertex1] + zValuesR2[polyVertex2] + zValuesR2[polyVertex3] + zValuesR2[polyVertex4]) / 4;

    xAveragesWorld = (xValues[polyVertex1] + xValues[polyVertex2] + xValues[polyVertex3] + xValues[polyVertex4]) / 4 + view.xpos;
    yAveragesWorld = (yValues[polyVertex1] + yValues[polyVertex2] + yValues[polyVertex3] + yValues[polyVertex4]) / 4 + view.ypos;
    zAveragesWorld = (zValues[polyVertex1] + zValues[polyVertex2] + zValues[polyVertex3] + zValues[polyVertex4]) / 4 + view.zpos;

    depths = (xAverages ^ 2 + yAverages ^ 2 + zAverages ^ 2);
    negDepths = -1 * depths;

}



fn hypot(a,b,c) {
    (a^2 + b^2 + c^2) ^ 0.5
}


polygonColors = sort([
    {
        xLightOffset = depthSorting.xAveragesWorld[i] - light.xpos;
        yLightOffset = depthSorting.yAveragesWorld[i] - light.ypos;
        zLightOffset = depthSorting.zAveragesWorld[i] - light.zpos;
        lightDist = hypot(xLightOffset, yLightOffset, zLightOffset);
        xLightOffsetN = xLightOffset / lightDist;
        yLightOffsetN = yLightOffset / lightDist;
        zLightOffsetN = zLightOffset / lightDist;
        brightness = max(xLightOffsetN * normal.x[i] + yLightOffsetN * normal.y[i] + zLightOffsetN * normal.z[i], 0) / lightDist / lightDist;
        
        rgb(
            total(brightness * light.rvalue) * 256,
            total(brightness * light.gvalue) * 256,
            total(brightness * light.bvalue) * 256
        )
    }
    for
    i=1 .. length(polyVertex1)
], depthSorting.negDepths);

//sidfksdjjdhfjhsdjf

show polygons = 
    sort(polygon(
        proj[polyVertex1],
        proj[polyVertex2],
        proj[polyVertex3],
        proj[polyVertex4]
    ), depthSorting.negDepths);
with @{
    color: "black",
    lines: false,
    fillOpacity: ds(1),
    colorLatex: ds(polygonColors)
}

/* thisShouldBeThree = three!() */
