

 

import "../../../desmo-lib/3d.desmo" as t;
import "../../../desmo-lib/binary.desmo" as bin;
import "project.desmo" as project;


t.vec3!(bgcolor, 180, 190, 200 )

fn gammaCorrect(x) {
  (x/256)^(1/gamma)*256
}

show bg = polygon(
  (-10, -10),
  (-10, 10), 
  (10, 10),  
  (10, -10)
); with @{
  colorLatex: ds(rgb(
    gammaCorrect(bgcolor.x), 
    gammaCorrect(bgcolor.y), 
    gammaCorrect(bgcolor.z)
  )),
  fillOpacity: ds(1) 
} 
           
settings @{
  viewport: {
    xmin: -2,
    ymin: -2,
    xmax: 2, 
    ymax: 2 
  }, 
  showGrid: false,
  showXAxis: false,
  showYAxis: false,
  userLockedViewport: true 
}


gamma = 2.2;         

viewDistance = uiSettings.distance.value         ;

cuboidSize = viewDistance;
physicsCuboidSize = 8;
multiObjPhysicsToDesmoscript!(physicsMeshData, "assets/world.obj")
lookupPhysicsMesh!(physicsMesh, physicsMeshData, 
  -1*physicsCuboidSize + controls.lookupPos.x, 
  -1*physicsCuboidSize + controls.lookupPos.y, 
  -1*physicsCuboidSize + controls.lookupPos.z,
  physicsCuboidSize + controls.lookupPos.x,     
  physicsCuboidSize + controls.lookupPos.y, 
  physicsCuboidSize + controls.lookupPos.z,
  6
)
multiObjCelShadingToDesmoscript!(graphicsMeshData, "assets/world.obj")
lookupCelShadingMesh!(  
  graphicsMesh, graphicsMeshData,
  -1*cuboidSize + controls.lookupPos.x, 
  -1*cuboidSize + controls.lookupPos.y, 
  -1*cuboidSize + controls.lookupPos.z,  
  cuboidSize + controls.lookupPos.x, 
  cuboidSize + controls.lookupPos.y, 
  cuboidSize + controls.lookupPos.z,
  18    
)


 

currentFrame = 0;



fn mix(a, b, factor) {
  show clampedFactor = min(max(factor, 0), 1); with @{ hidden: true }
  b * clampedFactor + a * (1 - clampedFactor)
}


sub!(proj, p, (p.x / p.z, p.y / p.z))

TAU = 6.28318531;
goldenAngle = 2.39996322972865332;

ns display {

  
  ns dof {
    count = ceil(uiSettings.dofQuality.value);
    countMinusOne = count - 1;
    dofCounter = match { countMinusOne == 0 => []; (1 .. (countMinusOne)); };
    offsetsX = join(cos(dofCounter * goldenAngle) * (dofCounter / countMinusOne)^0.5, 0);
    offsetsY = join(sin(dofCounter * goldenAngle) * (dofCounter / countMinusOne)^0.5, 0);
    focusDist = uiSettings.dofDistance.value;
    radius = uiSettings.dofStrength.value;
    opacity = min(3 / count, 0.5);
    fn circleOfConfusion(d) {
      abs(radius * (focusDist - d) / focusDist)
    }
  }



  // calculate view space
  deswizzle!(translated, graphicsMesh.vertexPosition.xyz - controls.pos.xyz)
  ns rotated1 {
    x = translated.x * cos(controls.rotation\x) - translated.z * sin(controls.rotation\x);
    y = translated.y;
    z = translated.x * sin(controls.rotation\x) + translated.z * cos(controls.rotation\x);
  }
  ns view {  
    x = rotated1.x;     
    y = rotated1.y * cos(controls.rotation\y) - rotated1.z * sin(controls.rotation\y);  
    z = rotated1.y * sin(controls.rotation\y) + rotated1.z * cos(controls.rotation\y);
  }
    
  // get average positions in world and view space
  deswizzle!(average, (   
    graphicsMesh.vertexPosition.xyz[graphicsMesh.index.tri1] 
    + graphicsMesh.vertexPosition.xyz[graphicsMesh.index.tri2]
    + graphicsMesh.vertexPosition.xyz[graphicsMesh.index.tri3]
  ) / 3)
  deswizzle!(viewAverage, average.xyz - controls.pos.xyz)
  t.normalize!(normalizedViewAverage, viewAverage)

  // depth sorting
  polygonDepths = normalizedViewAverage.mag;
  depthSortOrder = sort(1 .. length(graphicsMesh.index.tri1), -1 * polygonDepths);
    
  deswizzle!(view1, view.xyz[graphicsMesh.index.tri1])
  deswizzle!(view2, view.xyz[graphicsMesh.index.tri2])
  deswizzle!(view3, view.xyz[graphicsMesh.index.tri3])

  maxDepths = max(view1.z, view2.z, view3.z);

  deswizzle!(edge1, graphicsMesh.vertexPosition.xyz[graphicsMesh.index.tri2] - graphicsMesh.vertexPosition.xyz[graphicsMesh.index.tri1])
  deswizzle!(edge2, graphicsMesh.vertexPosition.xyz[graphicsMesh.index.tri3] - graphicsMesh.vertexPosition.xyz[graphicsMesh.index.tri1])
  t.cross!(notNormalizedNormal, edge1, edge2)
  backfaceDeterminant = t.dotns!(notNormalizedNormal, normalizedViewAverage);
  t.normalize!(normal, notNormalizedNormal)
  
  polygonFilter = depthSortOrder[
    max(
      sign(backfaceDeterminant),
      sign(polygonDepths - viewDistance),
      -1 *      sign(maxDepths)
    )[depthSortOrder] == -1
  ];
  //polygonFilter = polygonFilterTemp2[maxDepths[polygonFilterTemp2] > 0];

  fn smoothstepMix(a, b, factor) {
    mix(a, b, factor * factor * (3 - factor * 2))
  }

  fn rand(co1, co2) {
    mod(sin(co1 * 12.9898 + co2 * 78.223) * 43758.5453, 1)
  }

  flickeringPeriod = 3;
  glowingPeriod = 10;

  fn randomlyModulateLight(seed, period, brightnessVariation) {  
    smoothstepMix(
      rand(seed, floor(currentFrame / period)) * brightnessVariation + 1 - brightnessVariation,
      rand(seed, floor(currentFrame / period) + 1) * brightnessVariation + 1 - brightnessVariation,
      mod(currentFrame, period) / period 
    )
  }

  lightBrightnesses = [
    1, 
    randomlyModulateLight(1, flickeringPeriod, 0.6),
    randomlyModulateLight(2, flickeringPeriod, 0.6), 
    randomlyModulateLight(3, glowingPeriod, 0.97),
    randomlyModulateLight(4, glowingPeriod, 0.97)];

  light1Brightnesses = lightBrightnesses[graphicsMesh.light1Type+1];
  light2Brightnesses = lightBrightnesses[graphicsMesh.light2Type+1];

  brightnessFactor = normal.y * 0.2 + 1.0;

  ns colorChannels {
    r = graphicsMeshData.r[graphicsMesh.baseColor] * brightnessFactor
     + graphicsMeshData.r[graphicsMesh.light1Color] * light1Brightnesses
     + graphicsMeshData.r[graphicsMesh.light2Color] * light2Brightnesses; 
    g = graphicsMeshData.g[graphicsMesh.baseColor] * brightnessFactor   
     + graphicsMeshData.g[graphicsMesh.light1Color] * light1Brightnesses
     + graphicsMeshData.g[graphicsMesh.light2Color] * light2Brightnesses;
    b = graphicsMeshData.b[graphicsMesh.baseColor]  * brightnessFactor
     + graphicsMeshData.b[graphicsMesh.light1Color] * light1Brightnesses
     + graphicsMeshData.b[graphicsMesh.light2Color] * light2Brightnesses;
  }

  lightFactor = normalizedViewAverage.mag / viewDistance * 2.5 - 1.5   ;   

  colors = rgb( 
    (mix(colorChannels.r, bgcolor.x, lightFactor)/256)^(1/gamma)*256,
    (mix(colorChannels.g, bgcolor.y, lightFactor)/256)^(1/gamma)*256,
    (mix(colorChannels.b, bgcolor.z, lightFactor)/256)^(1/gamma)*256
  );  
  
  filteredColors = colors[polygonFilter];

  // display polygons
  show polys = [
  {
    r1 = dof.circleOfConfusion(view1.z[i]);
    r2 = dof.circleOfConfusion(view2.z[i]);
    r3 = dof.circleOfConfusion(view3.z[i]);
    o1 = dof.offsetsX[j];
    o2 = dof.offsetsY[j];
    project.getClippedPolygon(
      0.01,
      0.002, 
      view1.x[i]+o1*r1, view1.y[i]+o2*r1, view1.z[i],
      view2.x[i]+o1*r2, view2.y[i]+o2*r2, view2.z[i],
      view3.x[i]+o1*r3, view3.y[i]+o2*r3, view3.z[i]
    )
  }
  for
  j=1 .. dof.count;
  i=polygonFilter
  ]; with @{
    color: "red",
    lines: false,
    fillOpacity: ds(
      match {
        mod((1 .. (length(polygonFilter) * (dof.count))), dof.count) == 0 => 1;
        dof.opacity;
      }
    ),
    colorLatex: ds(
        [col for i=1 .. dof.count; col=filteredColors]
    )
  }
}



fn isPointInsideAABB(px, py, pz, xmin, ymin, zmin, xmax, ymax, zmax) {
  match {
    px < xmin => 0;
    py < ymin => 0;
    pz < zmin => 0;
    px > xmax => 0;
    py > ymax => 0;
    pz > zmax => 0;
    1;
  } 
}

fn isOverlapping(amin, amax, bmin, bmax) {
  min(
    match { (amax >= bmin) => 1; 0; },
    match { (bmax >= amin) => 1; 0; }
  )
}

fn isTriPossiblyInsideAABB(
  x1, y1, z1,
  x2, y2, z2,
  x3, y3, z3,
  xmin, ymin, zmin,
  xmax, ymax, zmax
) {
  xtrimin = min(x1, x2, x3);
  ytrimin = min(y1, y2, y3);
  ztrimin = min(z1, z2, z3);
  xtrimax = max(x1, x2, x3);
  ytrimax = max(y1, y2, y3);
  ztrimax = max(z1, z2, z3);
  min(
    isOverlapping(xmin, xmax, xtrimin, xtrimax),
    isOverlapping(ymin, ymax, ytrimin, ytrimax),
    isOverlapping(zmin, zmax, ztrimin, ztrimax)
  )
}




ns physics {
  deswizzle!(allpos1, physicsMesh.vertexPosition.xyz[physicsMesh.index.tri1])
  deswizzle!(allpos2, physicsMesh.vertexPosition.xyz[physicsMesh.index.tri2])
  deswizzle!(allpos3, physicsMesh.vertexPosition.xyz[physicsMesh.index.tri3])
  filter = (1 .. length(allpos1.x))[
    isTriPossiblyInsideAABB(
      allpos1.x, allpos1.y, allpos1.z,
      allpos2.x, allpos2.y, allpos2.z,
      allpos3.x, allpos3.y, allpos3.z,
      controls.physicsPos.x - controls.velMag,
      controls.physicsPos.y - controls.velMag,
      controls.physicsPos.z - controls.velMag,
      controls.physicsPos.x + controls.velMag,
      controls.physicsPos.y + controls.velMag,
      controls.physicsPos.z + controls.velMag
    ) == 1   
  ];

  deswizzle!(pos1, allpos1.xyz[filter])
  deswizzle!(pos2, allpos2.xyz[filter])
  deswizzle!(pos3, allpos3.xyz[filter])

  posIndices = match {
    length(pos1.x) == 0 => [];
    (1 .. length(pos1.x));
  };

  deswizzle!(edge1, allpos2.xyz - allpos1.xyz) 
  deswizzle!(edge2, allpos3.xyz - allpos1.xyz)
  t.cross!(notNormalizedNormal, edge1, edge2)
  t.normalize!(allnormal, notNormalizedNormal)

  deswizzle!(normal, allnormal.xyz[filter])

  fn noUndefined(x, alternative) {
    match {
      (x == x) => x;
      alternative;
    }
  }
  
  loop!(physicsLoop, 2, {
    t.vec3!(rayPos, controls.physicsPos.x, controls.physicsPos.y, controls.physicsPos.z)
    t.normalize!(rayDir, controls.velocity)
    distanceRemaining = rayDir.mag;
    isOnGround = 0;
  }, {
    rayTriangleIntersections =
      t.rayTriangleIntersectionWithIndex( 
        prev.rayPos.x, prev.rayPos.y, prev.rayPos.z,
        prev.rayDir.x, prev.rayDir.y, prev.rayDir.z,
        pos1.x, pos1.y, pos1.z,
        pos2.x, pos2.y, pos2.z,
        pos3.x, pos3.y, pos3.z,
        posIndices
      );

    aboveZeroRTIs = rayTriangleIntersections[rayTriangleIntersections\x > 0];

    closestIntersect = aboveZeroRTIs[aboveZeroRTIs\x == min(aboveZeroRTIs\x)][1];

    anyIntersects = match { (closestIntersect\x == closestIntersect\x) => 1; 0; };

    distanceToIntersection = match {
      anyIntersects == 0 => prev.distanceRemaining;
      min(closestIntersect\x, prev.distanceRemaining);
    };

    distanceRemaining = prev.distanceRemaining - distanceToIntersection;

    t.vec3!(rayPos,
      prev.rayPos.x + prev.rayDir.x * (distanceToIntersection - 0.0001),
      prev.rayPos.y + prev.rayDir.y * (distanceToIntersection - 0.0001),
      prev.rayPos.z + prev.rayDir.z * (distanceToIntersection - 0.0001)
    )

    indexOfIntersection = closestIntersect\y;

    t.vec3!(intersectedTriNormal, 
      normal.x[indexOfIntersection],
      normal.y[indexOfIntersection],
      normal.z[indexOfIntersection]
    )

    idotn = t.dotns!(prev.rayDir, intersectedTriNormal);

    isOnGround = max(
      prev.isOnGround,
      match { intersectedTriNormal.y > 0 => 1; 0; }
    );

    ns rayDir {
      x = match{(distanceRemaining == 0) => prev.rayDir.x;
        prev.rayDir.x - 2 * idotn * intersectedTriNormal.x;};
      y = match{(distanceRemaining == 0) => prev.rayDir.y;
        prev.rayDir.y - 2 * idotn * intersectedTriNormal.y;};
      z = match{(distanceRemaining == 0) => prev.rayDir.z;
        prev.rayDir.z - 2 * idotn * intersectedTriNormal.z;};
    }
  })
}







 

ticker @{ 
  handlerLatex: ds( 
    & 
    match { (mod(currentFrame, 30) == 0) => controls.updateMeshLookup; },
    currentFrame -> controls.reset(currentFrame + 1, 0),
    match { mod(currentFrame, controls.physicsInterval) == 0 => controls.doPhysics; } ,
    controls.doPerFramePhysics
  ),  
  playing: true, 
  open: true
}  

 
ns controls { 
  t.vec3!(physicsPos, 0, 7, 0)

  physicsInterval = 6;
  
  velFactor = mod(currentFrame - 1, physicsInterval) / physicsInterval;
  
  t.vec3!(pos, 
    mix(physicsPos.x, physics.physicsLoop.rayPos.x, velFactor), 
    mix(physicsPos.y, physics.physicsLoop.rayPos.y, velFactor) 
    + 1.5 + 0.25 * min(0, 1 - framesSinceOnGround / 8) * sin(accumDist * 0.2), 

    mix(physicsPos.z, physics.physicsLoop.rayPos.z, velFactor)
  )
  t.vec3!(velocity, 0.001, 0.0, 0.001) 
  t.vec3!(lookupPos, 0, 0, 0) 

  updateMeshLookup = &
    lookupPos.x -> pos.x,
    lookupPos.y -> pos.y,
    lookupPos.z -> pos.z;

  accumDist = 0;

  velMag = (velocity.x ^ 2 + velocity.y ^ 2 + velocity.z ^ 2) ^ 0.5;

  fn reset(normalPos, resetPos) {
    match {
      (physicsPos.y < 0) => resetPos;
      normalPos;
    }
  }

  doPhysics = &
    physicsPos.x -> reset(physics.physicsLoop.rayPos.x, 0),  
    physicsPos.y -> reset(physics.physicsLoop.rayPos.y, 7 ), 
    physicsPos.z -> reset(physics.physicsLoop.rayPos.z, 0),
    velocity.x -> reset(
      physics.physicsLoop.rayDir.x * velMag * 0.6 - 0 + 0.3 * rotationController\y * sin(rotation\x)
      , 0.001
    ),
    velocity.y -> reset(physics.physicsLoop.rayDir.y * velMag 
     * (0.99 - physics.physicsLoop.isOnGround * 0.8)
     - 0.09 + physics.physicsLoop.isOnGround * 0.091, 0 ), 
    velocity.z -> reset(
      physics.physicsLoop.rayDir.z * velMag * 0.6 - 0 + 0.3 * rotationController\y * cos(rotation\x),
      0
    ),
    framesSinceOnGround -> match { physics.physicsLoop.isOnGround == 0 => framesSinceOnGround + 1; 0; }
    ;

  framesSinceOnGround = 0;   

  doReset = match { physicsPos.y < 0 => & 
    rotationView -> joystickOffset
  ; };

  doPerFramePhysics = &
    rotation -> reset((rotation\x + rotationController\x * 0.1, 0), (3.14, 0)),
    accumDist -> accumDist + (velocity.x ^ 2 + velocity.z ^ 2) ^ 0.5,     
    doReset
    ;

  joystickOffset = (0, -0.5);

  show rotationView = (0, -0.5); with @{}
  rotationController = rotationView - joystickOffset;
  show rotationJoystick = polygon(joystickOffset, rotationView); with @{}
 
  rotation = (3.14, 0);
}


show resetOverlay = polygon(
  (-10, -10),
  (-10, 10), 
  (10, 10),  
  (10, -10)
); with @{
  colorLatex: ds(rgb(0, 0, 0)),
  fillOpacity: ds(1 - (currentFrame) / 20) 
}


fn gear(center, radius1, radius2, radius3, teeth, t) {
  match {
    (t > TAU) => (cos(-1 * t), sin(-1 * t)) * radius3;
    (cos(t), sin(t)) * (min(1, (abs(mod(t * teeth / TAU * 4, 4) - 2))^10) * (radius2 - radius1) + radius1);
  } + center
}


aspect = height / width;
top = 2 * aspect;

fn fixY(yval) {
  top - 2 + yval
}

sub!(uiRect, name, x1, y1, x2, y2, onclick, enabled,
  ns name {
    y3 = top - 2 + y1;
    y4 = top - 2 + match { enabled == 1 => y2; y1; };
    show button = polygon(
      (x1, y3),
      (x2, y3),
      (x2, y4),
      (x1, y4)
    ); with @{ colorLatex: ds(rgb(0,0,0)), fillOpacity: ds(0.2), lines: false, clickableInfo: {
      enabled: true,
      latex: ds(onclick)
    } }
  }
)

sub!(uiText, name, txt, x, y, size, enabled,
  ns name {
    show text = (x, fixY(y)); with @{
      colorLatex: ds(rgb(255,255,255)), 
      pointOpacity: ds(enabled),
      label: ds(txt),
      labelSize: ds(size / aspect),
      showLabel: true,
      suppressTextOutline: true,
      hidden: true,
      labelOrientation: "right"
    }
  }
)

sub!(uiDraggable, name, label, x1, y1, x2, y2, min, max, default, enabled,
  ns name {
    uiText!(text, label, x1 - 0.6 - uiLengthModifier * 0.4, y1, 1 + uiLengthModifier, enabled)
    value = value2 + min;
    value2 = default;
    fy1 = fixY(y1);
    fy2 = fixY(y2);
    show bg = polygon(
      (x1, fy1), 
      (x2, fy2)
    ); with @{
      colorLatex: ds(rgb(255, 255, 255)),
      lineOpacity: ds(enabled)
    }
    show slider = (
      value2 / (max - min) * (x2 - x1)
        + x1,
      value2 / (max - min) * (fy2 - fy1) + fy1
      ); with @{
      colorLatex: ds(rgb(255, 255, 255)),
      pointOpacity: ds(enabled)
    }
  }
)

uiLengthModifier = match { aspect > 1.5 => 1; 0; };
ns ui {
  uiRect!(settingsButton, -1.9, 1.9, -1.7, 1.7, & isSettingsEnabled -> 1 - isSettingsEnabled, 1)
  isSettingsEnabled = 0;
  uiRect!(settingsMenu, -1.9, 1.6, -0.6 + uiLengthModifier * 1.5, 0.9 - uiLengthModifier * 0.5, & isSettingsEnabled -> isSettingsEnabled, isSettingsEnabled)
}


ns uiOverlay {
  show settingsButtonGear = gear((-1.8, fixY(1.8)), 0.07, 0.085, 0.04, 8, parametricT); with @{
    colorLatex: ds(rgb(255, 255, 255)),
    parametricDomain: {
      min: ds(0), max: ds(TAU * 2)
    },
    lines: false,
    fillOpacity: ds(1),
    fill: true
  }

  uiText!(settingsTitle, "Settings", -1.85, 1.45, 2, ui.isSettingsEnabled)
  
}

ns uiSettings {
  uiDraggable!(dofQuality, "DoF Quality",
    -1.2 + uiLengthModifier * 0.4, 1.3, -0.7 + uiLengthModifier * 1.5, 1.3,
    0, 20, 1, 
    ui.isSettingsEnabled
  )
  uiDraggable!(distance, "View Distance",
    -1.2 + uiLengthModifier * 0.4, 1.2 - uiLengthModifier * 0.1, -0.7 + uiLengthModifier * 1.5, 1.2 - uiLengthModifier * 0.1,
    0, 64, 24, 
    ui.isSettingsEnabled
  )
  uiDraggable!(dofDistance, "DoF Distance",
    -1.2 + uiLengthModifier * 0.4, 1.1 - uiLengthModifier * 0.2, -0.7 + uiLengthModifier * 1.5, 1.1 - uiLengthModifier * 0.2,
    0, 32, 12, 
    ui.isSettingsEnabled
  )
  uiDraggable!(dofStrength, "DoF Strength",
    -1.2 + uiLengthModifier * 0.4, 1.0 - uiLengthModifier * 0.3, -0.7 + uiLengthModifier * 1.5, 1.0 - uiLengthModifier * 0.3,
    0, 2, 0.15, 
    ui.isSettingsEnabled
  )
}
