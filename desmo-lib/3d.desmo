sub!(cross,
  outvar,
  ax, ay, az,
  bx, by, bz,
  ns outvar {
    x = ay * bz - az * by;
    y = az * bx - ax * bz;
    z = ax * by - ay * bx;
  }
)

fn dot(
    ax, ay, az,
    bx, by, bz
) {
    ax * bx + ay * by + az * bz
}

fn rayTriangleIntersection(
    xray, yray, zray,
    xdir, ydir, zdir,
    xtri1, ytri1, ztri1,
    xtri2, ytri2, ztri2,
    xtri3, ytri3, ztri3
) {
    xe1 = xtri2 - xtri1;
    ye1 = ytri2 - ytri1;
    ze1 = ztri2 - ztri1;
    xe2 = xtri3 - xtri1;
    ye2 = ytri3 - ytri1;
    ze2 = ztri3 - ztri1;
    xnormal = ye1 * ze2 - ye2 * ze1;
    ynormal = ze1 * xe2 - ze2 * xe1;
    znormal = xe1 * ye2 - xe2 * ye1;
    det = -1 * (
        xdir * xnormal
        + ydir * ynormal
        + zdir * znormal
    );
    invdet = 1 / det;
    xao = xray - xtri1;
    yao = yray - ytri1;
    zao = zray - ztri1;
    xdao = yao * zdir - ydir * zao;
    ydao = zao * xdir - zdir * xao;
    zdao = xao * ydir - xdir * yao;
    u = dot(xe2, ye2, ze2, xdao, ydao, zdao) * invdet;
    v = -1 * dot(xe1, ye1, ze1, xdao, ydao, zdao) * invdet;
    t = dot(xao, yao, zao, xnormal, ynormal, znormal) * invdet;
    match {
        (det < 0.00001) => -1;
        (t < 0) => -1;
        (u < 0) => -1;
        (v < 0) => -1;
        ((u + v) > 1) => -1;
        t;
    }
}


sub!(mulMat3,
    outVector,
    matrix, vector,
    ns outVector {
        x = matrix.x.x * vector.x + matrix.y.x * vector.y + matrix.z.x * vector.z;
        y = matrix.x.y * vector.x + matrix.y.y * vector.y + matrix.z.y * vector.z;
        z = matrix.x.z * vector.x + matrix.y.z * vector.y + matrix.z.z * vector.z;
    }
)

sub!(transform,
    outVector,
    vector,
    translation,
    matrix,
    ns outVector {
        x = matrix.x.x * vector.x + matrix.y.x * vector.y + matrix.z.x * vector.z + translation.x;
        y = matrix.x.y * vector.x + matrix.y.y * vector.y + matrix.z.y * vector.z + translation.y;
        z = matrix.x.z * vector.x + matrix.y.z * vector.y + matrix.z.z * vector.z + translation.z;
    }
)

sub!(transform2,
    outVector,
    vector,
    translation,
    matrix,
    ns outVector {
        xt = vector.x + translation.x;
        yt = vector.y + translation.y;
        zt = vector.z + translation.z;
        x = matrix.x.x * xt + matrix.y.x * yt + matrix.z.x * zt;
        y = matrix.x.y * xt + matrix.y.y * yt + matrix.z.y * zt;
        z = matrix.x.z * xt + matrix.y.z * yt + matrix.z.z * zt;
    }
)

sub!(vec3,
    name,
    xvalues, yvalues, zvalues,
    ns name { x=xvalues; y=yvalues; z=zvalues; }
)

sub!(mat3,
    name,
    xx, xy, xz,
    yx, yy, yz,
    zx, zy, zz,
    ns name {
        ns x { x=xx; y=xy; z=xz; }
        ns y { x=yx; y=yy; z=yz; }
        ns z { x=zx; y=zy; z=zz; }
    }
)

sub!(mat3identity,
    name,
    mat3!(
        name,
        1, 0, 0,
        0, 1, 0,
        0, 0, 1
    ))

sub!(mat3FirstPerson,
    name,
    c,
    ns name {
        xx = cos(c\x); // x's contribution to x
        xz = -1 * sin(c\x); // x's contribution to z
        zx = sin(c\x);
        zz = cos(c\x);
        ns x { x=xx; y=0; z=zx; }
        ns y { x=-1*xz*sin(c\y); y=cos(c\y); z=-1*zz*sin(c\y); }
        ns z { x=xz*cos(c\y); y=sin(c\y); z=zz*cos(c\y); }
    }
)

sub!(cross,
    outvec,
    v1, v2,
    vec3!(
        outvec,
        v1.y * v2.z - v1.z * v2.y,
        v1.z * v2.x - v1.x * v2.z,
        v1.x * v2.y - v1.y * v2.x
    )
)


sub!(rodrigues,
    outvec,
    v, angle, axis,
    ns outvec {
        cosAngle = cos(angle);
        sinAngle = sin(angle);
        cross!(crossKV, v, axis)
        dotKV = v.x * axis.x + v.y * axis.y + v.z * axis.z;
        x = v.x * cosAngle + crossKV.x * sinAngle + axis.x * dotKV * (1 - cosAngle);
        y = v.y * cosAngle + crossKV.y * sinAngle + axis.y * dotKV * (1 - cosAngle);
        z = v.z * cosAngle + crossKV.z * sinAngle + axis.z * dotKV * (1 - cosAngle);
    }
)

sub!(rotateMat3,
    outmat,
    matrix, angle, axis,
    ns outmat {
        rodrigues!(x, matrix.x, angle, axis)
        rodrigues!(y, matrix.y, angle, axis)
        rodrigues!(z, matrix.z, angle, axis)
    }
)

sub!(rodriguesAction,
    actionName,
    v, angle, axis,
    ns actionName {
        cosAngle = cos(angle);
        sinAngle = sin(angle);
        cross!(crossKV, v, axis)
        dotKV = v.x * axis.x + v.y * axis.y + v.z * axis.z;
        action = & v.x -> v.x * cosAngle + crossKV.x * sinAngle + axis.x * dotKV * (1 - cosAngle),
                   v.y -> v.y * cosAngle + crossKV.y * sinAngle + axis.y * dotKV * (1 - cosAngle),
                   v.z -> v.z * cosAngle + crossKV.z * sinAngle + axis.z * dotKV * (1 - cosAngle);
    }
)

sub!(rotateMat3Action,
    actionName,
    matrix, angle, axis,
    ns actionName {
        rodriguesAction!(x, matrix.x, angle, axis)
        rodriguesAction!(y, matrix.y, angle, axis)
        rodriguesAction!(z, matrix.z, angle, axis)
        action = & x.action, y.action, z.action;
    }
)

sub!(normalize,
    outvec, v,
    ns outvec {
        mag = (v.x * v.x + v.y * v.y + v.z * v.z) ^ 0.5;
        x = v.x / mag;
        y = v.y / mag;
        z = v.z / mag;
    }
)

sub!(projection, outvec, u, v,
    ns outvec {
        vDotV = v.x * v.x + v.y * v.y + v.z * v.z;
        uDotV = u.x * v.x + u.y * v.y + u.z * v.z;
        factor = uDotV / vDotV;
        x = v.x * factor;
        y = v.y * factor;
        z = v.z * factor;
    }
)

sub!(dotns, ns1, ns2,
    ns1.x * ns2.x + ns1.y * ns2.y + ns1.z * ns2.z
)