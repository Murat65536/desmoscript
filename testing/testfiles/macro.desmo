import "../../desmo-lib/3d.desmo" as t;

// load a .obj file
loadObj!(obj, "./icosahedron.obj")

// perspective-projected vertices of obj
persp = (
    (obj.vertices.x + translation\x) / (obj.vertices.z + 5), 
    (obj.vertices.y + translation\y) / (obj.vertices.z + 5)
);

colors = rgb(
    obj.materials.diffuse.r[obj.faceMaterials] * 256,
    obj.materials.diffuse.g[obj.faceMaterials] * 256,
    obj.materials.diffuse.b[obj.faceMaterials] * 256
);

i1 = obj.vertexIndices[1, 4 .. length(obj.vertexIndices)];
i2 = obj.vertexIndices[2, 5 .. length(obj.vertexIndices)];
i3 = obj.vertexIndices[3, 6 .. length(obj.vertexIndices)];

translation = (0, 0);

rtis = max(t.rayTriangleIntersection(
    0, 0, 0,
    0, 0, 1,
    obj.vertices.x[i1] + translation\x, 
    obj.vertices.y[i1] + translation\y, 
    obj.vertices.z[i1] + 5, 
    obj.vertices.x[i2] + translation\x, 
    obj.vertices.y[i2] + translation\y, 
    obj.vertices.z[i2] + 5, 
    obj.vertices.x[i3] + translation\x, 
    obj.vertices.y[i3] + translation\y, 
    obj.vertices.z[i3] + 5
));

// display obj triangles using vertex indices
show
    polygons = polygon(
        persp[obj.vertexIndices[1, 4 .. length(obj.vertexIndices)]],
        persp[obj.vertexIndices[2, 5 .. length(obj.vertexIndices)]],
        persp[obj.vertexIndices[3, 6 .. length(obj.vertexIndices)]]
    );
with @{ color: "black", colorLatex: ds(colors) }

sub!(doubleThis, macroVar, macroVar * 2)

sub!(rect, corner1, corner2, polygon(
  (corner1\x, corner1\y),
  (corner2\x, corner1\y),
  (corner2\x, corner2\y),
  (corner1\x, corner2\y)
))

macrotestagain = doubleThis!(4);

recttest = rect!((2,2), (4,4));

t.cross!(aaaa, 1, 2, 3, 4, 5, 6)